Installing dependencies on linux/unix:
  install libx11-dev, perl, IO::String (libio-string-perl) and libncurses5-dev

Installing dependencies on microsoft windows:
  mingw and msys, see http://www.mingw.org/wiki/msys for how to install it,
    summarized here:
      install MinGW in C:\MinGW
        http://sourceforge.net/project/showfiles.php?group_id=2435&package_id=240780
        install gcc, g++ and gdb
      install MSYS 1.0.10 in C:\msys\1.0
        http://downloads.sourceforge.net/mingw/MSYS-1.0.10.exe
      install MSYS DTK 1.0 in C:\msys\1.0
        http://downloads.sourceforge.net/mingw/msysDTK-1.0.1.exe
      install MSYS Core 1.0.11
        http://downloads.sourceforge.net/mingw/msysCORE-1.0.11-2007.01.19-1.tar.bz2
	Untar it with msys using `tar xjf ...` then close msys and copy the
directory over C:\msys\1.0 using the windows copy funcition and overwriting
existing files. You can't untar it directly over C:\msys\1.0 using msys because
it replaces some files that would be in use.

Compiling:
  On Debian, `apt-get install devscripts debhelper` then run `debuild -b` and
install the brace package with `dpkg -i ...`, and install the dependencies with
`apt-get -f install`

  otherwise, or for development:
    ./configure
    make
    make install
  You can use `./configure --prefix /usr` or similar to change where it is
  installed.

  You can also use the shortcut scripts ./build.sh ./rebuild.sh ./configure.sh
./clean.sh and ./deb.sh
  The ./build.sh script builds brace and reinstalls it, this is quicker than
using a .deb if you want to change brace or libb and test it quickly.

Running the Examples:
  There are examples in ./eg/ you can compile and run them directly like
  ./eg/hello.b for example. I recommend to run the examples from a terminal.
Some of the examples might not be working. Some might be unresponsive when you
try to kill them, you might need to press ^C or switch to a different virtual
console or use taskmgr on windows.


TODO I could bundle the mingw and msys stuff together with brace.

TODO use different build directories for each arch (linux and windows) so that
they can both be built in one tree. Can use `gcc -dumpmachine` for that.
