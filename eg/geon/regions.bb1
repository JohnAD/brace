use <stdio.h>
export <vector>
export <errno.h>
export <setjmp.h>
export <stdlib.h>
export <sys/types.h>
export <stdarg.h>
export <sys/stat.h>
export <fcntl.h>
export <unistd.h>
export <dirent.h>
export <string.h>
export <utime.h>
export <sys/socket.h>
export <netinet/in.h>
export <netinet/tcp.h>
export <arpa/inet.h>
export <netdb.h>
export <sys/un.h>
export <sys/sendfile.h>
export <sys/select.h>
export <poll.h>
export <sys/ioctl.h>
export <sys/mman.h>
export <ctype.h>
export <math.h>
export <limits.h>
export <time.h>
export <sys/time.h>
export <locale.h>

using namespace std

enum region_type
	LAND,
	LAKE,

struct str
struct buffer
struct vstream
struct vec
struct list
struct list_x
struct hashtable
struct key_value
struct node_kv
struct circbuf
struct deq
struct thunk
struct err
struct error_handler
struct complex
struct vec3
struct angle3
struct region

typedef struct str str
typedef struct buffer buffer
typedef struct vstream vstream
typedef struct vec vec
typedef struct list list
typedef struct list_x list_x
typedef struct hashtable hashtable
typedef struct key_value key_value
typedef struct node_kv node_kv
typedef struct circbuf circbuf
typedef struct deq deq
typedef struct thunk thunk
typedef struct err err
typedef struct error_handler error_handler
typedef struct complex complex
typedef struct vec3 vec3
typedef struct angle3 angle3
typedef struct region region

typedef unsigned char byte
typedef double num
typedef unsigned char boolean
typedef char *cstr
typedef unsigned int count_t
typedef unsigned char uchar
typedef struct timeval timeval
typedef struct timespec timespec
typedef struct tm datetime
typedef void (*free_t)(void *)
typedef struct sockaddr sockaddr
typedef struct sockaddr_in sockaddr_in
typedef struct sockaddr_un sockaddr_un
typedef struct hostent hostent
typedef int SOCKET
typedef void (*vs_putc_t)(int c, vstream *vs)
typedef int (*vs_getc_t)(vstream *vs)
typedef int (*vs_printf_t)(vstream *vs, const char *format, va_list ap)
typedef char *(*vs_gets_t)(char *s, int size, vstream *vs)
typedef void (*vs_write_t)(const void *ptr, size_t size, size_t nmemb, vstream *vs)
typedef size_t (*vs_read_t)(void *ptr, size_t size, size_t nmemb, vstream *vs)
typedef void (*vs_flush_t)(vstream *vs)
typedef void (*vs_close_t)(vstream *vs)
typedef void (*vs_shutdown_t)(vstream *vs, int how)
typedef struct dirent dirent
typedef struct stat stats
typedef struct stat lstats
typedef struct stat Stats
typedef struct stat Lstats
typedef enum { if_dead_error, if_dead_null, if_dead_path, if_dead_warn=1<<31 } readlinks_if_dead
typedef struct pollfd pollfd
typedef int (*cmp_t)(const void *, const void *)
typedef unsigned int (*hash_func)(void *key)
typedef boolean (*eq_func)(void *k1, void *k2)
typedef void *(*thunk_func)(void *obj, void *common_arg, void *specific_arg)
typedef struct itimerval itimerval
typedef vector<angle3> poly_angle3
typedef vector<vec3> poly_vec3

struct str
	char *start
	char *end

struct buffer
	char *start
	char *end
	char *space_end

struct vstream
	vs_putc_t putc
	vs_getc_t getc
	vs_printf_t printf
	vs_gets_t gets
	vs_write_t write
	vs_read_t read
	vs_flush_t flush
	vs_close_t close
	vs_shutdown_t shutdown
	void *data

struct vec
	buffer b
	size_t element_size
	size_t space
	size_t size

struct list
	list *next

struct list_x
	list *next
	void *o

struct hashtable
	list *buckets
	size_t size
	hash_func hash
	eq_func eq

struct key_value
	void *key
	void *value

struct node_kv
	list l
	key_value kv

struct circbuf
	ssize_t size
	ssize_t space
	ssize_t start
	char *data

struct deq
	circbuf b
	size_t element_size
	size_t space
	size_t size
	size_t start

struct thunk
	thunk_func func
	void *obj
	void *common_arg

struct err
	cstr msg
	int no
	void *data

struct error_handler
	sigjmp_buf *jump
	thunk handler
	int err

struct complex
	num r
	num i

struct vec3
	num x, y, z
	vec3() : x(0), y(0), z(0) {}
	vec3(num x, num y, num z) : x(x), y(y), z(z) {}

struct angle3
	num latitude, longitude
	angle3() : latitude(0), longitude(0) {}
	angle3(num latitude, num longitude) : latitude(latitude), longitude(longitude) {}

struct region
	int id
	region_type type
	poly_angle3 points_a
	poly_vec3 points_v
	region() : id(-1), type(LAND), points_a(), points_v() {}

extern "C" str new_str(char *start, char *end)
extern "C" str str_dup(str s)
extern "C" str str_of_size(size_t size)
extern "C" char *str_copy(char *to, str from)
extern "C" str_free(str s)
extern "C" cstr cstr_from_str(const str s)
extern "C" str str_cat_2(str s1, str s2)
extern "C" str str_cat_3(str s1, str s2, str s3)
extern "C" str str_from_char(char c)
extern "C" str str_from_cstr(cstr cs)
extern "C" str_dump(str s)
extern "C" char *str_chr(str s, char c)
extern "C" str str_str(str haystack, str needle)
extern "C" cstr *str_str_start(str haystack, str needle)
extern "C" fprint_str(FILE *stream, str s)
extern "C" print_str(str s)
extern "C" fsay_str(FILE *stream, str s)
extern "C" say_str(str s)
extern "C" buffer_init(buffer *b, size_t space)
extern "C" buffer_free(buffer *b)
extern "C" buffer_set_space(buffer *b, size_t space)
extern "C" buffer_set_size(buffer *b, size_t size)
extern "C" buffer_double(buffer *b)
extern "C" buffer_squeeze(buffer *b)
extern "C" buffer_cat_char(buffer *b, char c)
extern "C" buffer_cat_cstr(buffer *b, const char *s)
extern "C" buffer_cat_str(buffer *b, str s)
extern "C" buffer_cat_range(buffer *b, const char *start, const char *end)
extern "C" buffer_grow(buffer *b, size_t delta_size)
extern "C" buffer_clear(buffer *b)
extern "C" char buffer_last_char(buffer *b)
extern "C" boolean buffer_ends_with_char(buffer *b, char c)
extern "C" boolean buffer_ends_with(buffer *b, cstr s)
extern "C" char buffer_first_char(buffer *b)
extern "C" char buffer_get_char(buffer *b, size_t i)
extern "C" buffer_zero(buffer *b)
extern "C" int Sprintf(buffer *b, const char *format, ...)
extern "C" cstr format(const char *format, ...)
extern "C" cstr vformat(const char *format, va_list ap)
extern "C" int Vsnprintf(char *buf, size_t size, const char *format, va_list ap)
extern "C" int Vsprintf(buffer *b, const char *format, va_list ap)
extern "C" buffer_add_nul(buffer *b)
extern "C" char *buffer_nul_terminate(buffer *b)
extern "C" buffer_strip_nul(buffer *b)
extern "C" buffer_dump(FILE *stream, buffer *b)
extern "C" buffer *buffer_dup_0(buffer *from)
extern "C" buffer *buffer_dup(buffer *to, buffer *from)
extern "C" cstr buffer_to_cstr(buffer *b)
extern "C" buffer_from_cstr(buffer *b, cstr s, size_t len)
extern "C" buffer *buffer_from_cstr_1(cstr s)
extern "C" buffer_shift(buffer *b, size_t shift)
extern "C" buffer_ensure_space(buffer *b, size_t space)
extern "C" buffer_ensure_size(buffer *b, ssize_t size)
extern "C" buffer_ensure_free(buffer *b, ssize_t free)
extern "C" buffer_nl(buffer *b)
extern "C" buf_splice(buffer *b, size_t i, size_t cut, char *in, size_t ins)
extern "C" buffer *Subbuf(buffer *b, size_t i, size_t n, size_t extra)
extern "C" buffer *subbuf(buffer *sub, buffer *b, size_t i, size_t n)
extern "C" buf_dup_guts(buffer *b, size_t extra)
extern "C" int Socket(int domain, int type, int protocol)
extern "C" Bind(int sockfd, struct sockaddr *my_addr, socklen_t addrlen)
extern "C" Listen(int sockfd, int backlog)
extern "C" int Accept(int earfd, struct sockaddr *addr, socklen_t *addrlen)
extern "C" Connect(int sockfd, const struct sockaddr *serv_addr, socklen_t addrlen)
extern "C" Sockaddr_in(struct sockaddr_in *sa, char *addr, int port)
extern "C" hostent *Gethostbyname(const char *name)
extern "C" cstr name_to_ip(const char *name)
extern "C" int Server_tcp(char *addr, int port)
extern "C" Setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
extern "C" int Client_tcp(char *addr, int port)
extern "C" cstr Hostname()
extern "C" ssize_t Send(int s, const void *buf, size_t len, int flags)
extern "C" ssize_t Recv(int s, void *buf, size_t len, int flags)
extern "C" ssize_t SendTo(int s, const void *buf, size_t len, int flags, const struct sockaddr *to, socklen_t tolen)
extern "C" ssize_t RecvFrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, socklen_t *fromlen)
extern "C" Shutdown(int s, int how)
extern "C" Closesocket(int fd)
extern "C" keepalive(int fd, int keepalive)
extern "C" nodelay(int fd, int nodelay)
extern "C" cork(int fd, int cork)
extern "C" reuseaddr(int fd, int reuseaddr)
extern "C" Getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)
extern "C" int Getsockerr(int fd)
extern "C" int Server_unix_stream(char *addr)
extern "C" int Client_unix_stream(char *addr)
extern "C" Sockaddr_unix(struct sockaddr_un *sa, char *addr)
extern "C" ssize_t Sendfile(int out_fd, int in_fd, off_t *offset, size_t count)
extern "C" vstream_init_stdio(vstream *vs, FILE *s)
extern "C" vs_putc_stdio(int c, vstream *vs)
extern "C" int vs_getc_stdio(vstream *vs)
extern "C" int vs_printf_stdio(vstream *vs, const char *format, va_list ap)
extern "C" char *vs_gets_stdio(char *s, int size, vstream *vs)
extern "C" vs_write_stdio(const void *ptr, size_t size, size_t nmemb, vstream *vs)
extern "C" size_t vs_read_stdio(void *ptr, size_t size, size_t nmemb, vstream *vs)
extern "C" vs_flush_stdio(vstream *vs)
extern "C" vs_close_stdio(vstream *vs)
extern "C" vs_shutdown_stdio(vstream *vs, int how)
extern "C" vstreams_init()
extern "C" vstream_init_buffer(vstream *vs, buffer *b)
extern "C" vs_putc_buffer(int c, vstream *vs)
extern "C" int vs_getc_buffer(vstream *vs)
extern "C" int vs_printf_buffer(vstream *vs, const char *format, va_list ap)
extern "C" char *vs_gets_buffer(char *s, int size, vstream *vs)
extern "C" vs_write_buffer(const void *ptr, size_t size, size_t nmemb, vstream *vs)
extern "C" size_t vs_read_buffer(void *ptr, size_t size, size_t nmemb, vstream *vs)
extern "C" vs_flush_buffer(vstream *vs)
extern "C" vs_close_buffer(vstream *vs)
extern "C" vs_shutdown_buffer(vstream *vs, int how)
extern "C" vs_putc(int c)
extern "C" int vs_getc(void)
extern "C" int vs_printf(const char *format, va_list ap)
extern "C" char *vs_gets(char *s, int size)
extern "C" vs_write(const void *ptr, size_t size, size_t nmemb)
extern "C" size_t vs_read(void *ptr, size_t size, size_t nmemb)
extern "C" vs_flush(void)
extern "C" vs_close(void)
extern "C" vs_shutdown(int how)
extern "C" int pf(const char *format, ...)
extern "C" int vs_sayf(const char *format, va_list ap)
extern "C" int sf(const char *format, ...)
extern "C" int print(const char *s)
extern "C" int say(const char *s)
extern "C" int rl(buffer *b)
extern "C" cstr rl_0()
extern "C" vec *read_ints(cstr file)
extern "C" vec *read_nums(cstr file)
extern "C" vec *read_cstrs(cstr file)
extern "C" vstream_init_circbuf(vstream *vs, circbuf *b)
extern "C" vs_putc_circbuf(int c, vstream *vs)
extern "C" int vs_getc_circbuf(vstream *vs)
extern "C" int vs_printf_circbuf(vstream *vs, const char *format, va_list ap)
extern "C" char *vs_gets_circbuf(char *s, int size, vstream *vs)
extern "C" vs_write_circbuf(const void *ptr, size_t size, size_t nmemb, vstream *vs)
extern "C" size_t vs_read_circbuf(void *ptr, size_t size, size_t nmemb, vstream *vs)
extern "C" vs_flush_circbuf(vstream *vs)
extern "C" vs_close_circbuf(vstream *vs)
extern "C" vs_shutdown_circbuf(vstream *vs, int how)
extern "C" discard(size_t n)
extern "C" int Open(const char *pathname, int flags, mode_t mode)
extern "C" Close(int fd)
extern "C" ssize_t Read_some(int fd, void *buf, size_t count)
extern "C" ssize_t Read(int fd, void *buf, size_t count)
extern "C" ssize_t Write_some(int fd, const void *buf, size_t count)
extern "C" Write(int fd, const void *buf, size_t count)
extern "C" slurp_2(int fd, buffer *b)
extern "C" buffer *slurp_1(int filedes)
extern "C" spurt(int fd, buffer *b)
extern "C" fslurp_2(FILE *s, buffer *b)
extern "C" buffer *fslurp_1(FILE *s)
extern "C" fspurt(FILE *s, buffer *b)
extern "C" FILE *Fopen(const char *path, const char *mode)
extern "C" Fclose(FILE *fp)
extern "C" char *Fgets(char *s, int size, FILE *stream)
extern "C" int Freadline(buffer *b, FILE *stream)
extern "C" int Readline(buffer *b)
extern "C" cstr Freadline_1(FILE *stream)
extern "C" int Printf(const char *format, ...)
extern "C" int Vprintf(const char *format, va_list ap)
extern "C" int Fprintf(FILE *stream, const char *format, ...)
extern "C" int Vfprintf(FILE *stream, const char *format, va_list ap)
extern "C" Fflush(FILE *stream)
extern "C" FILE *Fdopen(int filedes, const char *mode)
extern "C" Nl(FILE *stream)
extern "C" crlf(FILE *stream)
extern "C" Puts(const char *s)
extern "C" Fsay(FILE *stream, const char *s)
extern "C" Fputs(const char *s, FILE *stream)
extern "C" int Sayf(const char *format, ...)
extern "C" int Vsayf(const char *format, va_list ap)
extern "C" int Fsayf(FILE *stream, const char *format, ...)
extern "C" int Vfsayf(FILE *stream, const char *format, va_list ap)
extern "C" char *Input(const char *prompt)
extern "C" char *Inputf(const char *format, ...)
extern "C" char *Vinputf(const char *format, va_list ap)
extern "C" char *Vfinputf(FILE *in, FILE *out, const char *format, va_list ap)
extern "C" char *Finput(FILE *in, FILE *out, const char *prompt)
extern "C" char *Finputf(FILE *in, FILE *out, const char *format, ...)
extern "C" char *Sinput(FILE *s, const char *prompt)
extern "C" char *Sinputf(FILE *s, const char *format, ...)
extern "C" DIR *Opendir(const char *name)
extern "C" dirent *Readdir(DIR *dir)
extern "C" Closedir(DIR *dir)
extern "C" vec *Ls(const char *name, int all)
extern "C" vec *ls(const char *name, boolean all)
extern "C" vec *ls_(const char *name, boolean all, vec *v)
extern "C" vec *slurp_lines_0()
extern "C" vec *slurp_lines(vec *lines)
extern "C" Remove(const char *path)
extern "C" int Temp(buffer *b, char *prefix, char *suffix)
extern "C" int Tempdir(buffer *b, char *prefix, char *suffix)
extern "C" int Tempfile(buffer *b, char *prefix, char *suffix, char *tmpdir, int dir, int mode)
extern "C" char random_alphanum()
extern "C" int exists(const char *file_name)
extern "C" int lexists(const char *file_name)
extern "C" off_t file_size(const char *file_name)
extern "C" off_t fd_size(int fd)
extern "C" int Stat(const char *file_name, struct stat *buf)
extern "C" int is_file(const char *file_name)
extern "C" int is_dir(const char *file_name)
extern "C" int is_symlink(const char *file_name)
extern "C" int is_real_dir(const char *file_name)
extern "C" Fstat(int filedes, struct stat *buf)
extern "C" cx(const char *path)
extern "C" cnotx(const char *path)
extern "C" chmod_add(const char *path, mode_t add_mode)
extern "C" chmod_sub(const char *path, mode_t sub_mode)
extern "C" Stats_init(stats *s, const char *file_name)
extern "C" Lstats_init(stats *s, const char *file_name)
extern "C" stats_init(stats *s, const char *file_name)
extern "C" lstats_init(stats *s, const char *file_name)
extern "C" int Lstat(const char *file_name, struct stat *buf)
extern "C" FILE *Popen(const char *command, const char *type)
extern "C" int Pclose(FILE *stream)
extern "C" int Fgetc(FILE *stream)
extern "C" Fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
extern "C" size_t Fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
extern "C" Fwrite_str(FILE *stream, str s)
extern "C" Fwrite_buffer(FILE *stream, buffer *b)
extern "C" size_t Fread_buffer(FILE *stream, buffer *b)
extern "C" Fputc(int c, FILE *stream)
extern "C" Fseek(FILE *stream, long offset, int whence)
extern "C" long Ftell(FILE *stream)
extern "C" off_t Lseek(int fd, off_t offset, int whence)
extern "C" Truncate(const char *path, off_t length)
extern "C" Ftruncate(int fd, off_t length)
extern "C" _Readlink(const char *path, buffer *b)
extern "C" cstr Readlink(const char *path)
extern "C" cstr readlinks(cstr path, readlinks_if_dead if_dead)
extern "C" _Getcwd(buffer *b)
extern "C" cstr Getcwd()
extern "C" Chdir(const char *path)
extern "C" Mkdir(const char *pathname, mode_t mode)
extern "C" Mkdir_if(const char *pathname, mode_t mode)
extern "C" say_cstr(cstr s)
extern "C" Rename(const char *oldpath, const char *newpath)
extern "C" Chmod(const char *path, mode_t mode)
extern "C" Chown(const char *path, uid_t uid, gid_t gid)
extern "C" Lchown(const char *path, uid_t uid, gid_t gid)
extern "C" Symlink(const char *oldpath, const char *newpath)
extern "C" Link(const char *oldpath, const char *newpath)
extern "C" Pipe(int filedes[2])
extern "C" int Dup(int oldfd)
extern "C" int Dup2(int oldfd, int newfd)
extern "C" FILE *Freopen(const char *path, const char *mode, FILE *stream)
extern "C" print_range(char *start, char *end)
extern "C" fprint_range(FILE *stream, char *start, char *end)
extern "C" say_range(char *start, char *end)
extern "C" fsay_range(FILE *stream, char *start, char *end)
extern "C" stats_dump(Stats *s)
extern "C" mode_t mode(const char *file_name)
extern "C" cp(const char *from, const char *to, int mode)
extern "C" off_t cp_fd(int in, int out)
extern "C" fcp(FILE *in, FILE *out)
extern "C" int Select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)
extern "C" fd_set_init(fd_set *o)
extern "C" cstr which(cstr file)
extern "C" int can_read(int fd)
extern "C" int can_write(int fd)
extern "C" int has_error(int fd)
extern "C" Mkdirs(const char *pathname, mode_t mode)
extern "C" Mkdirs_cwd(const char *pathname, mode_t mode, cstr basedir)
extern "C" Rmdir(const char *pathname)
extern "C" Rmdirs(const char *pathname)
extern "C" boolean newer(const char *file1, const char *file2)
extern "C" lnsa(cstr from, cstr to, cstr cwd)
extern "C" Cp(cstr from, cstr to, Lstats *sf)
extern "C" CP(cstr from, cstr to, Lstats *sf)
extern "C" cp_attrs(cstr from, cstr to)
extern "C" cp_attrs_st(Lstats *sf, cstr to)
extern "C" cp_mode(Stats *sf, cstr to)
extern "C" cp_owner(Lstats *sf, cstr to)
extern "C" Utime(const char *filename, const struct utimbuf *times)
extern "C" cp_times(Lstats *sf, cstr to)
extern "C" cp_atime(Lstats *sf, cstr to, Lstats *st)
extern "C" cp_mtime(Lstats *sf, cstr to, Lstats *st)
extern "C" Setvbuf(FILE *stream, char *buf, int mode, size_t size)
extern "C" ssize_t Readv(int fd, const struct iovec *iov, int iovcnt)
extern "C" ssize_t Writev(int fd, const struct iovec *iov, int iovcnt)
extern "C" Socketpair(int d, int type, int protocol, int sv[2])
extern "C" int file_cmp(cstr fa, cstr fb)
extern "C" create_hole(cstr file, off_t size)
extern "C" insert_hole(cstr file, off_t offset, off_t size)
extern "C" int Pselect(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, const struct timespec *timeout, const sigset_t *sigmask)
extern "C" int Poll(struct pollfd *fds, nfds_t nfds, int timeout)
extern "C" nonblock(int fd, int nb)
extern "C" int fcntl_flock(int fd, int cmd, short type, short whence, off_t start, off_t len)
extern "C" int Fcntl_flock(int fd, int cmd, short type, short whence, off_t start, off_t len)
extern "C" int Fcntl_getfd(int fd)
extern "C" Fcntl_setfd(int fd, long arg)
extern "C" int Fcntl_getfl(int fd)
extern "C" Fcntl_setfl(int fd, long arg)
extern "C" cloexec(int fd)
extern "C" cloexec_off(int fd)
extern "C" void *normal_Malloc(size_t size)
extern "C" void *normal_Realloc(void *ptr, size_t size)
extern "C" void *normal_Calloc(size_t nmemb, size_t size)
extern "C" cstr normal_Strdup(const char *s)
extern "C" char *normal_Strndup(const char *s, size_t n)
extern "C" void *rc_malloc(size_t size)
extern "C" count_t rc_use(void *obj)
extern "C" count_t rc_done(void *obj)
extern "C" rc_free(void *obj)
extern "C" void *rc_calloc(size_t nmemb, size_t size)
extern "C" memlog_stderr()
extern "C" memlog_file(cstr file)
extern "C" void *memlog_Malloc(size_t size, char *file, int line)
extern "C" memlog_Free(void *ptr, char *file, int line)
extern "C" void *memlog_Realloc(void *ptr, size_t size, char *file, int line)
extern "C" void *memlog_Calloc(size_t nmemb, size_t size, char *file, int line)
extern "C" cstr memlog_Strdup(const char *s, char *file, int line)
extern "C" cstr memlog_Strndup(const char *s, size_t n, char *file, int line)
extern "C" void *Mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset)
extern "C" int Munmap(void *addr, size_t length)
extern "C" hexdump(FILE *stream, char *b0, char *b1)
extern "C" boolean printable(uchar c)
extern "C" void *mem_mem(const void* haystack, size_t haystacklen, const void* needle, size_t needlelen)
extern "C" int num_cmp(const void *a, const void *b)
extern "C" int int_cmp(const void *a, const void *b)
extern "C" int off_t_cmp(const void *a, const void *b)
extern "C" size_t arylen(void *_p)
extern "C" sort_vec(vec *v, cmp_t cmp)
extern "C" int cstrp_cmp(const void *_a, const void *_b)
extern "C" int cstrp_cmp_null(const void *_a, const void *_b)
extern "C" comm(vec *merge_v, vec *comm_v, vec *va, vec *vb, cmp_t cmp, free_t freer)
extern "C" comm_dump_cstr(vec *merge_v, vec *comm_v)
extern "C" void *memdup(const void *src, size_t n, size_t extra)
extern "C" cstr_set_add(vec *set, cstr s)
extern "C" unsigned int bit_reverse(unsigned int x)
extern "C" vec_init_el_size(vec *v, size_t element_size, size_t space)
extern "C" vec_clear(vec *v)
extern "C" vec_free(vec *v)
extern "C" vec_Free(vec *v)
extern "C" vec_space(vec *v, size_t space)
extern "C" vec_size(vec *v, size_t size)
extern "C" vec_double(vec *v)
extern "C" vec_squeeze(vec *v)
extern "C" void *vec_element(vec *v, size_t index)
extern "C" void *vec_top(vec *v, size_t index)
extern "C" void *vec_push(vec *v)
extern "C" vec_pop(vec *v)
extern "C" vec_grow(vec *v, size_t delta_size)
extern "C" vec *vec_dup_0(vec *from)
extern "C" vec *vec_dup(vec *to, vec *from)
extern "C" vec_ensure_size(vec *v, size_t size)
extern "C" void *vec_to_array(vec *v)
extern "C" vec_splice(vec *v, size_t i, size_t cut, void *in, size_t ins)
extern "C" vec *Subvec(vec *v, size_t i, size_t n, size_t extra)
extern "C" vec *subvec(vec *sub, vec *v, size_t i, size_t n)
extern "C" list_init(list *l)
extern "C" boolean list_is_empty(list *l)
extern "C" list *list_last(list *l)
extern "C" list_dump(list *l)
extern "C" list *list_reverse(list *l)
extern "C" list *list_reverse_fast(list *l)
extern "C" list_push(list **list_pp, list *new_node)
extern "C" list_pop(list **list_pp)
extern "C" list_free(list **l)
extern "C" list_x_init(list_x *n, void *o)
extern "C" cstr_dos_to_unix(cstr s)
extern "C" cstr cstr_unix_to_dos(cstr s)
extern "C" cstr_chomp(cstr s)
extern "C" int cstr_eq(cstr s1, cstr s2)
extern "C" int cstr_is_empty(cstr s1)
extern "C" int cstr_ends_with(cstr s, cstr substr)
extern "C" cstr cstr_begins_with(cstr s, cstr substr)
extern "C" cstr cstr_from_buffer(buffer *b)
extern "C" cstr cstr_of_size(size_t n)
extern "C" cstr cstr_chop_end(cstr c, cstr end)
extern "C" cstr cstr_chop_start(cstr c, cstr start)
extern "C" void_cstr(cstr s)
extern "C" splitv(vec *v, cstr s, char c)
extern "C" splitv1(vec *v, cstr s, char c)
extern "C" splitv_dup(vec *v, const char *_s, char c)
extern "C" cstr *split(cstr s, char c)
extern "C" cstr *splitn(cstr s, char c, int n)
extern "C" splitvn(vec *v, cstr s, char c, int n)
extern "C" splitvn1(vec *v, cstr s, char c, int n)
extern "C" cstr *split_dup(const char *s, char c)
extern "C" cstr join(cstr sep, cstr *s)
extern "C" cstr joinv(cstr sep, vec *v)
extern "C" char *Strstr(const char *haystack, const char *needle)
extern "C" char *Strcasestr(const char *haystack, const char *needle)
extern "C" char *Strchr(const char *s, int c)
extern "C" char *Strrchr(const char *s, int c)
extern "C" hashtable_init(hashtable *ht, hash_func hash, eq_func eq, size_t size)
extern "C" list *alloc_buckets(size_t size)
extern "C" list *hashtable_lookup_ref(hashtable *ht, void *key)
extern "C" key_value *hashtable_lookup(hashtable *ht, void *key)
extern "C" key_value *hashtable_ref_lookup(list *l)
extern "C" void *hashtable_value(hashtable *ht, void *key)
extern "C" void *hashtable_value_or_null(hashtable *ht, void *key)
extern "C" void *hashtable_value_or(hashtable *ht, void *key, void *def)
extern "C" key_value *hashtable_add(hashtable *ht, void *key, void *value)
extern "C" hashtable_ref_add(list *l, void *key, void *value)
extern "C" key_value hashtable_delete(hashtable *ht, void *key)
extern "C" hashtable_delete_maybe(hashtable *ht, void *key)
extern "C" key_value hashtable_ref_delete(list *l)
extern "C" node_kv *hashtable_ref_node(list *l)
extern "C" boolean hashtable_ref_exists(list *l)
extern "C" key_value *hashtable_ref_key_value(list *l)
extern "C" list *which_bucket(hashtable *ht, void *key)
extern "C" size_t hashtable_sensible_size(size_t size)
extern "C" unsigned int cstr_hash(void *s)
extern "C" hashtable_dump(hashtable *ht)
extern "C" key_value *hashtable_lookup_or_add_key(hashtable *ht, void *key, void *value_init)
extern "C" key_value *hashtable_lookup_or_die(hashtable *ht, void *key)
extern "C" unsigned int int_hash(void *i_ptr)
extern "C" boolean int_eq(int *a, int *b)
extern "C" hashtable_free(hashtable *ht)
extern "C" circbuf_init(circbuf *b, ssize_t space)
extern "C" char *circbuf_get_pos(circbuf *b, int index)
extern "C" circbuf_free(circbuf *b)
extern "C" circbuf_set_space(circbuf *b, ssize_t space)
extern "C" circbuf_ensure_space(circbuf *b, size_t space)
extern "C" circbuf_set_size(circbuf *b, ssize_t size)
extern "C" circbuf_grow(circbuf *b, ssize_t delta_size)
extern "C" circbuf_shift(circbuf *b, ssize_t delta_size)
extern "C" circbuf_double(circbuf *b)
extern "C" circbuf_squeeze(circbuf *b)
extern "C" circbuf_clear(circbuf *b)
extern "C" buffer_to_circbuf(circbuf *cb, buffer *b)
extern "C" circbuf_cat_char(circbuf *b, char c)
extern "C" circbuf_cat_cstr(circbuf *b, const char *s)
extern "C" circbuf_cat_str(circbuf *b, str s)
extern "C" circbuf_cat_range(circbuf *b, const char *start, const char *end)
extern "C" char circbuf_first_char(circbuf *b)
extern "C" char circbuf_last_char(circbuf *b)
extern "C" char circbuf_get_char(circbuf *b, ssize_t i)
extern "C" int Vsprintf_cb(circbuf *b, const char *format, va_list ap)
extern "C" circbuf_add_nul(circbuf *b)
extern "C" circbuf_to_buffer(buffer *b, circbuf *cb)
extern "C" circbuf_tidy(circbuf *b)
extern "C" cstr circbuf_to_cstr(circbuf *b)
extern "C" char *circbuf_nul_terminate(circbuf *b)
extern "C" ssize_t cbindex_not_len(circbuf *b, char *p)
extern "C" ssize_t cbindex_not_0(circbuf *b, char *p)
extern "C" circbuf_from_cstr(circbuf *b, cstr s, size_t len)
extern "C" _deq_init(deq *q, size_t element_size, size_t space)
extern "C" deq_free(deq *q)
extern "C" deq_space(deq *q, size_t space)
extern "C" deq_size(deq *q, size_t size)
extern "C" deq_clear(deq *q)
extern "C" deq_double(deq *q)
extern "C" deq_squeeze(deq *q)
extern "C" void *deq_element(deq *q, size_t index)
extern "C" void *deq_push(deq *q)
extern "C" deq_pop(deq *q)
extern "C" void *deq_top(deq *q, size_t index)
extern "C" void *deq_unshift(deq *q)
extern "C" deq_shift(deq *q)
extern "C" void *thunk_ignore(void *obj, void *common_arg, void *specific_arg)
extern "C" void *thunk_void(void *obj, void *common_arg, void *specific_arg)
extern "C" void *thunk_thunks(void *obj, void *common_arg, void *specific_arg)
extern "C" void *thunks_call(deq *q, void *specific_arg)
extern "C" error(const char *format, ...)
extern "C" serror(const char *format, ...)
extern "C" warn(const char *format, ...)
extern "C" failed(const char *funcname)
extern "C" failed2(const char *funcname, const char *errmsg)
extern "C" failed3(const char *funcname, const char *msg1, const char *msg2)
extern "C" warn_failed(const char *funcname)
extern "C" swarning(const char *format, ...)
extern "C" memdump(const char *from, const char *to)
extern "C" error__assert(int should_be_true, const char *format, ...)
extern "C" usage(char *syntax)
extern "C" error_init()
extern "C" err *error_add(cstr msg, int no, void *data)
extern "C" Throw(cstr msg, int no, void *data)
extern "C" throw_(err *e)
extern "C" die_errors(int status)
extern "C" clear_errors()
extern "C" warn_errors()
extern "C" warn_errors_keep()
extern "C" debug_errors()
extern "C" debug_errors_keep()
extern "C" fault_(char *file, int line, const char *format, ...)
extern "C" add_error_message(int errnum, cstr message)
extern "C" cstr Strerror(int errnum)
extern "C" Perror(const char *s)
extern "C" void *error_warn(void *obj, void *common_arg, void *er)
extern "C" void *error_ignore(void *obj, void *common_arg, void *er)
extern "C" Rsleep(num time)
extern "C" num rsleep(num time)
extern "C" num rtime()
extern "C" Gettimeofday(struct timeval *tv)
extern "C" Gmtime(double t, datetime *result)
extern "C" Localtime(double t, datetime *result)
extern "C" int Mktime(datetime *t)
extern "C" Timef(buffer *b, const datetime *tm, const char *format)
extern "C" cstr Timef_cstr(datetime *dt, const char *format)
extern "C" datetime_init(datetime *dt, int year, int month, int day,  int hour, int min, int sec)
extern "C" csleep(long double step, boolean sync, boolean use_asleep, boolean rush)
extern "C" long double asleep(long double dt, long double t)
extern "C" lsleep_init()
extern "C" lsleep(num dt)
extern "C" Getitimer(int which, struct itimerval *value)
extern "C" Setitimer(int which, const struct itimerval *value, struct itimerval *ovalue)
extern "C" Ualarm(num dt)
extern "C" rtime_to_timeval(num rtime, struct timeval *tv)
extern "C" rtime_to_timespec(num rtime, struct timespec *ts)
extern "C" num timeval_to_rtime(const struct timeval *tv)
extern "C" num timespec_to_rtime(const struct timespec *ts)
extern "C" int rtime_to_ms(num rtime)
extern "C" num ms_to_rtime(int ms)
extern "C" date_rfc1123_init()
extern "C" char *date_rfc1123(time_t t)
extern "C" complex c_add(complex a, complex b)
extern "C" complex c_sub(complex a, complex b)
extern "C" complex c_mul(complex a, complex b)
extern "C" complex c_div(complex a, complex b)
extern "C" num c_norm(complex a)
extern "C" num c_mag(complex a)
extern "C" num c_ang(complex a)
extern "C" complex c_conj(complex a)
extern "C" complex c_add_r(complex a, num b)
extern "C" complex c_sub_r(complex a, num b)
extern "C" complex c_add_i(complex a, num b)
extern "C" complex c_sub_i(complex a, num b)
extern "C" complex c_mul_r(complex a, num b)
extern "C" complex c_div_r(complex a, num b)
extern "C" complex c_mul_i(complex a, num b)
extern "C" complex c_div_i(complex a, num b)
extern "C" complex c_mul_i1(complex a)
extern "C" complex c_div_i1(complex a)
extern "C" complex c_neg(complex a)
extern "C" complex cis(num ang)
extern "C" complex c_exp(complex a)
extern "C" complex c_log(complex a)
extern "C" complex c_pow(complex a, complex b)
extern "C" complex c_pow_r(complex a, num b)
extern "C" int sgn(num x)
extern "C" num nmin(num x, num y)
extern "C" num nmax(num x, num y)
extern "C" int imin(int x, int y)
extern "C" int imax(int x, int y)
extern "C" num notpot(num hypotenuse, num x)
extern "C" seed()
extern "C" int mod(int i, int base)
extern "C" int Div(int i, int base)
extern "C" num rmod(num r, num base)
extern "C" num dist(num x0, num y0, num x1, num y1)
extern "C" num double_or_nothing(num factor)
extern "C" divmod(int i, int base, int *div, int *_mod)
extern "C" divmod_range(int i, int low, int high, int *div, int *_mod)
extern "C" rdivmod(num r, num base, num *div, num *_mod)
extern "C" rdivmod_range(num r, num low, num high, num *div, num *_mod)
extern "C" num clamp(num x, num min, num max)
extern "C" int iclamp(int x, int min, int max)
extern "C" num spow(num b, num e)
extern "C" num rand_normal()
extern "C" fft(complex *in, complex *out, int log2_n)
extern "C" str str_null
extern "C" int listen_backlog
extern "C" char hostname__[256]
extern "C" vstream struct__in, *in
extern "C" vstream struct__out, *out
extern "C" vstream struct__er, *er
extern "C" size_t block_size
extern "C" fd_set *tmp_fd_set
extern "C" buffer _Cp_symlink, *Cp_symlink
extern "C" int memlog_on
extern "C" key_value kv_null
extern "C" thunk _thunk_null
extern "C" thunk *thunk_null
extern "C" int exit__error
extern "C" int exit__fault
extern "C" int throw_faults
extern "C" thunk _thunk_error_warn
extern "C" thunk *thunk_error_warn
extern "C" thunk _thunk_error_ignore
extern "C" thunk *thunk_error_ignore
extern "C" vec *error_handlers
extern "C" vec *errors
extern "C" hashtable *extra_error_messages
extern "C" cstr dt_format
extern "C" cstr dt_format_tz
extern "C" boolean sleep_debug
extern "C" long double csleep_last
extern "C" long double asleep_small
extern "C" boolean lsleep_inited
extern "C" num bm_start
extern "C" boolean bm_enabled
extern "C" complex c_0
extern "C" complex c_1
extern "C" complex c_i
extern "C" const double pi
extern "C" const double e

angle3_to_vec3(const angle3 &a, vec3 &v)
num vec3_length(const vec3 &v)
vec3_to_angle3(const vec3 &v, angle3 &a)
x_y_rot(num &x, num &y, num a)
vec3_rot_z(vec3 &v, num a)
vec3_rot_x(vec3 &v, num a)
vec3_rot_y(vec3 &v, num a)
viewpoint_transform(vec3 &v)
poly_angle3_to_poly_vec3(const poly_angle3 &poly_a, poly_vec3 &poly_v)
poly_vec3_viewpoint_transform(poly_vec3 &poly_v)
load_and_convert_regions(const char *datafile)

extern num latitude
extern num longitude
extern num spin
extern num r
extern num zm

vector<region> regions

load_and_convert_regions(const char *datafile)
	int err
	int n_points, type
	int x, y, z
	FILE *regions_file = fopen(datafile, "r")
	if regions_file == NULL
		serror("can't open regions file %s", datafile)
	vec3 v
	angle3 a
	region dummy_region
	int i = 0
	repeat
		err = fscanf(regions_file, "%d %d", &n_points, &type)
		if err == 0
			error("integer expected")
		if err == EOF
			return
		regions.push_back(dummy_region)
		region &r = regions[regions.size()-1]
		r.id = i
		r.type = (region_type)type
		poly_vec3 &poly_v = r.points_v
		poly_angle3 &poly_a = r.points_a
		err = fscanf(regions_file, "%d %d %d", &x, &y, &z)
		if err == 0
			error("integer expected")
		if err == EOF
			error("missing first point")
		v.x = x / 30000.0
		v.y = y / 30000.0
		v.z = z / 30000.0
		vec3_to_angle3(v, a)
		poly_a.push_back(a)
		poly_v.push_back(v)
		for int c = 1 ; c < n_points ; ++c
			int dx, dy, dz
			fscanf(regions_file, "%d %d %d", &dx, &dy, &dz)
			if err == 0
				error("integer expected")
			if err == EOF
				error("missing delta point")
			x += dx
			y += dy
			z += dz
			v.x = x / 30000.0
			v.y = y / 30000.0
			v.z = z / 30000.0
			vec3_to_angle3(v, a)
			poly_a.push_back(a)
			poly_v.push_back(v)
		++i
	fclose(regions_file)

