#!/lang/b
use b

def N 52
def packs 1

sprite card_sprites[N]
pointn2 card_pos[N*packs], card_vel[N*packs]

int cardw, cardh

Main()
	load_cards()
	plot_cards_test()

load_cards()
	char file[32] = ""
	cd_block("cards")
		for(i, 0, N)
			int card = i / 4 * 4 + (i+1) % 4  # CSHD -> SHDC!
			snprintf(file, sizeof(file), "%02d.png", card+1)
			sprite_load_png(file, &card_sprites[i])
	cardw = card_sprites[0].width
	cardh = card_sprites[0].height

plot_cards_test()
	space()
	gr_fast()

	for(i, 0, N*packs)
		card_pos[i] = (pointn2){{Rand(0, w-cardw), Rand(0, h-cardh)}}
		card_vel[i] = (pointn2){{Rand(-5, 5), Rand(-5, 5)}}

	decl(screen, sprite)
	sprite_screen(screen)
	  # do this globally

	bm_start()
	let(reps, 500)
	repeat(reps)
		pix_clear()
#		for(i, 0, N*packs)
		back(i, N*packs-1, -1)   # high cards on top
			pointn2 *p = &card_pos[i]
			pointn2 *d = &card_vel[i]
			sprite_put(screen, &card_sprites[i%N], p->x[0], p->x[1])
			p->x[0] += d->x[0]
			p->x[1] += d->x[1]
			d->x[1] += 0.1
			if p->x[1] > h - cardh
				p->x[1] = 2 * (h - cardh) - p->x[1]
				d->x[1] *= -0.8
			boolean right = p->x[0] > w - cardw
			boolean left = p->x[0] < 0
			if left || right
				d->x[0] *= -0.8
				if left
					p->x[0] *= -1
				 else
					p->x[0] = 2 * (w - cardw) - p->x[0]
		Paint()
	bm_ps("cards", N*packs*reps)

# LIBB

# TODO

# sprite_put_behind ...
