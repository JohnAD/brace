#!/lang/b
use png.h
use b

sprite card_sprites[52]

Main()
	load_cards()
	plot_cards_test()

load_cards()
	char file[32] = ""
	cd_block("cards")
		for(i, 0, 51)
			snprintf(file, sizeof(file), "%02d.png", i+1)
			sprite_load_png(file, &card_sprites[i])

plot_cards_test()
	space()
	gr_fast()

	decl(screen, sprite)
	sprite_screen(screen)
	  # do this globally

	bm_start()
	let(N, 500)
	repeat(N)
		for(i, 0, 51)
			sprite_put(screen, &card_sprites[i], randi(0, w), randi(0, h))
		Paint()
	bm_ps("cards", 52*N)


# LIBB

ldef debug void

sprite *sprite_load_png_stream(FILE *in, sprite *s)
#	unsigned char header[8]
#	Fread_all(header, 1, 8, in)
#	if png_sig_cmp(header, 0, 8)
#		error("sprite_load_png: not a png image")

	png_structp png_ptr = png_create_read_struct(PNG_LIBPNG_VER_STRING, (png_voidp)NULL, NULL, NULL)
	if !png_ptr
		failed("png_create_read_struct")

	png_infop info_ptr = png_create_info_struct(png_ptr)
	if !info_ptr
		png_destroy_read_struct(&png_ptr, (png_infopp)NULL, (png_infopp)NULL)
		failed("png_create_info_struct")

	png_infop end_info = png_create_info_struct(png_ptr)
	if !end_info
		png_destroy_read_struct(&png_ptr, &info_ptr, (png_infopp)NULL)
		failed("png_create_info_struct")

	if setjmp(png_jmpbuf(png_ptr))
		png_destroy_read_struct(&png_ptr, &info_ptr, &end_info)
		error("sprite_load_png: failed")

	png_init_io(png_ptr, in)
#	png_set_sig_bytes(png_ptr, 8)

#	png_read_png(png_ptr, info_ptr, 0, NULL)
	png_read_info(png_ptr, info_ptr)
	png_uint_32 width, height
	int bit_depth, color_type, interlace_type, compression_type, filter_type
	png_get_IHDR(png_ptr, info_ptr, &width, &height, &bit_depth, &color_type, &interlace_type, &compression_type, &filter_type)

	if color_type == PNG_COLOR_TYPE_PALETTE
		debug("png_set_palette_to_rgb")
		png_set_palette_to_rgb(png_ptr)
	if color_type == PNG_COLOR_TYPE_GRAY && bit_depth < 8
		debug("png_set_expand_gray_1_2_4_to_8")
		png_set_expand_gray_1_2_4_to_8(png_ptr)
	if png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS)
		debug("png_set_tRNS_to_alpha")
		png_set_tRNS_to_alpha(png_ptr)
	if bit_depth == 16
		debug("png_set_strip_16")
		png_set_strip_16(png_ptr)
	png_set_invert_alpha(png_ptr)
	if among(color_type, PNG_COLOR_TYPE_RGB, PNG_COLOR_TYPE_GRAY, PNG_COLOR_TYPE_PALETTE)
		debug("png_set_add_alpha")
		png_set_add_alpha(png_ptr, 0x0, PNG_FILLER_AFTER)
#	if among(color_type, PNG_COLOR_TYPE_RGB_ALPHA, PNG_COLOR_TYPE_GRAY_ALPHA)
#		debug("png_set_swap_alpha")
#		png_set_swap_alpha(png_ptr)
	if among(color_type, PNG_COLOR_TYPE_GRAY, PNG_COLOR_TYPE_GRAY_ALPHA)
		debug("png_set_gray_to_rgb")
		png_set_gray_to_rgb(png_ptr)
	if among(color_type, PNG_COLOR_TYPE_RGB, PNG_COLOR_TYPE_RGB_ALPHA, PNG_COLOR_TYPE_PALETTE)
		png_set_bgr(png_ptr)

#	# gamma
#	cstr gamma_str
#	double gamma, screen_gamma
#
#	if (gamma_str = getenv("SCREEN_GAMMA")) != NULL
#		screen_gamma = atof(gamma_str)
#	else
#		screen_gamma = 2.2  # A good guess for a PC monitor in a bright office or a dim room
#		# screen_gamma = 2.0  # A good guess for a PC monitor in a dark room
#		# screen_gamma = 1.7 or 1.0  # A good guess for Mac systems
#
#	if png_get_gAMA(png_ptr, info_ptr, &gamma)
#		png_set_gamma(png_ptr, screen_gamma, gamma)
#	else
#		png_set_gamma(png_ptr, screen_gamma, 1/2.2)
##		png_set_gamma(png_ptr, screen_gamma, 0.45455)

	if interlace_type == PNG_INTERLACE_ADAM7
		debug("png_set_interlace_handling")
		int number_of_passes = png_set_interlace_handling(png_ptr)
		use(number_of_passes)

	png_read_update_info(png_ptr, info_ptr)

	png_uint_32 rowbytes = png_get_rowbytes(png_ptr, info_ptr)
	
	if rowbytes != width * 4
		error("sprite_load_png: rowbytes != width * 4 ; %ld != %ld", (long)rowbytes, (long)width*4)

	init(s, sprite, width, height)
	png_bytep row_pointers[height]
	for long y=0; y<(long)height; ++y
		row_pointers[y] = (png_bytep)(s->pixels + y * width)
	
	png_read_image(png_ptr, row_pointers)
	png_read_end(png_ptr, end_info)
	png_destroy_read_struct(&png_ptr, &info_ptr, &end_info)
	
	return s
