#!/lang/b
use b

def N 52
def packs 1
sprite background, card_back_sprite, card_sprites[N], stacks[4]
pointn2 card_pos[N*packs], card_vel[N*packs]
int cardw, cardh
def gap 15
def y_step 25
num plot_slow = 0.01

struct card_state
	int n
	int col
	int row
	boolean face_up

card_state card[N]
vec cols[8]

Main:
	load_sprites()
	space(background.width, background.height)
	init()
	repeat:
		control_default()
		new_game()
		control_play()
		event_loop()

load_sprites:
	char file[32] = ""
	cd_block("cards"):
		for(i, 0, N):
			int card = i / 4 * 4 + (i+1) % 4  # CSHD -> SHDC!
			snprintf(file, sizeof(file), "%02d.png", card+1)
			sprite_load_png(&card_sprites[i], file)
		for(i, 0, 4):
			int suit = (i+1) % 4  # CSHD -> SHDC!
			snprintf(file, sizeof(file), "stack%02d.png", suit+1)
			sprite_load_png(&stacks[i], file)
		sprite_load_png(&card_back_sprite, "b02fv.png")
		sprite_load_png(&background, "greenbackground.png")
	cardw = card_back_sprite.width ; cardh = card_back_sprite.height

init:
	for(i, 0, 8):
		init(&cols[i], vec, int, 16)

new_game:
	shuffle()
	deal()
	plot_cards()

shuffle:
	for(c, 0, N):
		card_state *C = &card[c]
		C->n = c
	for(c, 0, N):
		int c2 = randi(c, N)
		card_state *C = &card[c], *C2 = &card[c2]
		swap(C->n, C2->n)

deal:
	for(i, 0, 8):
		vecclr(&cols[i])
	int col = 0, row = 0
	for(c, 0, N):
		card_state *C = &card[c]
		vec_push(&cols[col], c)
		C->col = col
		C->row = row
		C->face_up = veclen(&cols[col]) > col
		++col
		if col == 7
			++row
			col = 1
			while veclen(&cols[col]) == col+5
				++col

plot_cards:
	sprite_put(screen, &background, 0, 0)
	for(suit, 0, 4):
		pointn2 p = card_point(7, suit)
		sprite_put_transp(screen, &stacks[suit], p.x[0], p.x[1])
	int row = 0
	int some
	do:
		some = 0
		for(col, 0, 8):
			if veclen(&cols[col]) > row
				some = 1
				int c = *(int*)v(&cols[col], row)
				card_state *C = &card[c]
				pointn2 p = card_point(C->col, C->row)
				sprite *s = C->face_up ? &card_sprites[C->n] : &card_back_sprite
				sprite_put(screen, s, p.x[0], p.x[1])
				if plot_slow
					Paint()
					Sleep(plot_slow)
		++row
	 while some
	Paint()

pointn2 card_point(int col, int row)
	pointn2 pos
	pos.x[0] = gap + col * ((w-gap) / 8)
	pos.x[1] = gap + row * (col < 7 ? y_step : cardh + gap)
	return pos

int suit(int n)
	return n % 4

int value(int n)
	return n / 4 + 1

control_play:
	set_key_handler_default(thunk(key_input))
	set_mouse_handler(1, thunk(move_cards))
	set_mouse_handler(3, thunk(stack_cards))
	# TODO

void *key_input(void *obj, void *a0, void *event)
	use(obj, a0)
	gr_event *e = event
	bad_key("key input ignored: %s: %s", e)
	return thunk_yes

void *move_cards(void *obj, void *a0, void *event)
	use(obj, a0)
	gr_event *e = event
	debug("move cards ignored: %s: b%d", event_type_name(e->type), e->which)
	return thunk_yes

void *stack_cards(void *obj, void *a0, void *event)
	use(obj, a0)
	gr_event *e = event
	debug("stack cards ignored: %s: b%d", event_type_name(e->type), e->which)
	return thunk_yes

# LIBB:
