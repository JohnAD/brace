When assert is used in a library, we would need separate debug and normal libraries
Perhaps do not call assert from libraries, only from macro wrappers?

check out and maybe use parts of / get ideas from other libraries:
	libapr0 - The Apache Portable Runtime
	nspr / geckopr
	glib / gtk
	qt
	boost (C++, www.boost.org)
	...

finish gr.b, based loosely on roses.b, rocks.b and graph.b
rx.b for perl-compatible regular expressions (use libpcre)

opt.b for command-line options (sane - canonical syntax, all command-line
functions available from the API, like GetOpt::OO.pm was meant to be)

a macro to wrap a lib call, check for an error value, and call failed if it was an error, i.e.

	failif(pclose, (stream), != 0)

	  ->

	if pclose(stream) != 0
		failed("pclose")
	
	(this is wrong in fact, pclose returns an meaningful int - exit status)
	
	
	return failif(popen, (command, type), == NULL)

	  ->
	
	FILE *rv = popen(command, type)
	if rv == NULL
		failed("popen")
	return rv


	Could make another macro for complete wrapper functions, in the simple
	case.


Functions which take a buffer as arg for output append to it.  Rename them, and
make the normal functions overwrite (i.e. set b->size = 0 then call the other)


Write a dirbasename function that changes the last / in a filename to a \0 and
returns a pointer to the char after it; or if no /, returns NULL.  In the case
of input "/foo", output would be ("", "foo") rather than ("/", "foo")
unfortunately.  Unix convention for root is bad, it should be like Acorn's:
$.foo.bar ; but then have to use another special character.  Could be "//foo/bar" like windows.  How about this mapping? :

  unix	new
  ----	---
  /foo	./foo
  ./foo	/foo
  .	""  (empty string)
  ./	/
  /	.
  ..	..

foo/bar/../baz -> foo/bar/./baz

  That would work better, with "" as the current directory - or could refer to
  it as /.  Should always refer to a directory as foo/ to distinguish from a
  file, and to allow virtual filesystems (e.g. to access inside archives like this:
    foo.zip   (the file)
    foo.zip/  (the top directory in the file)
    foo.zip/item1
    foo.zip/subdir/item2

  Under unix, dirbasename can return a struct (tuple) of two char *, and the
  const strings "." and "/" where necessary.

important:  don't use foo_is_bar method names for boolean queries, use _q on end instead:
	foo_bar_q ???

because some boolean questions don't sound right with "is", e.g. hashtable_ref_exists

idea: my

#def my(a)
#	set(my a, (a))


for IO of lines / fields, allow to change delimiter chars (e.g. '\n', '\0' for find, '\r', etc - but not multi-byte \r\n!)
